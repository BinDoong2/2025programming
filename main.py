import streamlit as st
import pandas as pd
from collections import defaultdict

# 데이터 로드
@st.cache_data
def load_data():
    df = pd.read_csv('games.csv')
    return df

games_df = load_data()

# --- UI 및 설문 구성 ---
st.title('🎯 나의 핵심 게임 장르 찾기')
st.write('총 12개의 질문에 답하고, 당신의 플레이 성향에 딱 맞는 핵심 장르와 게임을 추천받으세요!')

# 12개의 설문 문항
questions = {
    "q1": ("새로운 게임을 시작할 때, 가장 먼저 무엇에 끌리시나요?", 
           ("몰입감 높은 스토리와 세계관", "빠른 액션과 타격감", "고민이 필요한 전략과 퍼즐", "다른 사람들과의 상호작용")),
    "q2": ("게임 플레이 중 가장 큰 만족을 느낄 때는 언제인가요?", 
           ("강력한 보스를 쓰러뜨렸을 때", "나만의 공간이나 캐릭터를 꾸밀 때", "복잡한 문제를 해결했을 때", "팀원과 협력하여 승리했을 때")),
    "q3": ("선호하는 게임의 진행 속도는 어떤가요?", 
           ("빠르고 숨 쉴 틈 없는 전개", "내 페이스대로 즐기는 여유로운 플레이", "신중한 계획이 요구되는 턴(Turn) 방식", "예측 불가능하고 매번 다른 경험")),
    "q4": ("게임에서 실패(죽음 등)했을 때 어떤 감정을 느끼나요?", 
           ("성장의 밑거름! 더 강해져서 돌아온다", "괜찮아, 다른 걸 하면 돼", "패배 원인을 분석하고 다음 수를 생각한다", "아쉽지만, 팀원들과 다음을 기약한다")),
    "q5": ("게임에서 가장 중요하게 생각하는 요소는 무엇인가요?", 
           ("매력적인 캐릭터와 감동적인 서사", "정교한 컨트롤과 즉각적인 피드백", "자원 관리와 효율적인 성장", "다른 플레이어와의 경쟁 또는 협력")),
    "q6": ("어떤 종류의 도전을 즐기시나요?", 
           ("강력한 적들과의 전투", "창의력을 발휘하는 건설과 제작", "두뇌를 자극하는 퍼즐과 수수께끼", "예측불허의 상황과 생존 경쟁")),
    "q7": ("게임의 스토리를 즐기는 방식은 어떤가요?", 
           ("주인공이 되어 스토리를 직접 이끌어간다", "한 편의 영화나 소설처럼 감상한다", "스토리보다는 게임의 규칙과 시스템이 더 재밌다", "다른 플레이어들과 함께 만들어가는 이야기")),
    "q8": ("선호하는 게임의 비주얼 스타일은 무엇인가요?", 
           ("현실적인 그래픽과 분위기", "개성 있는 아트 스타일과 판타지 세계", "정보가 명확하게 보이는 깔끔한 인터페이스", "다양한 코스튬과 꾸미기 요소")),
    "q9": ("게임을 할 때 주로 사용하는 기기는 무엇인가요?", 
           ("키보드와 마우스 (PC)", "게임 패드 (콘솔/PC)", "터치스크린 (모바일)", "상관없음")),
    "q10": ("얼마나 많은 시간을 하나의 게임에 투자하는 편인가요?", 
           ("수백 시간 이상 깊게 파고드는 편", "엔딩을 보고 다른 게임을 찾아보는 편", "짧은 시간 동안 가볍게 즐기는 편", "커뮤니티 활동까지 하며 계속 즐기는 편")),
    "q11": ("다음 중 가장 흥미로운 활동은 무엇인가요?", 
           ("미지의 세계를 탐험하고 비밀을 밝히는 것", "최고의 장비를 맞추고 캐릭터를 성장시키는 것", "나만의 제국이나 도시를 건설하고 운영하는 것", "랭킹을 올리거나 길드 활동을 하는 것")),
    "q12": ("게임 커뮤니티(공략 사이트, 포럼 등)를 얼마나 활용하시나요?", 
           ("적극적으로 정보를 찾고 공유한다", "막힐 때만 가끔 찾아본다", "거의 보지 않고 혼자 해결한다", "다른 사람과 소통하기 위해 항상 이용한다"))
}

# 사용자 답변 저장
answers = {}
for q_id, (question, options) in questions.items():
    st.subheader(question)
    answers[q_id] = st.radio(f"radio_{q_id}", options, label_visibility="collapsed")

# --- 추천 로직 ---
if st.button('내게 맞는 장르와 게임 확인하기'):
    # 1. 성향 점수 초기화
    traits = defaultdict(int)

    # 2. 답변에 따라 성향 점수 부여
    # (질문, 답변) -> 성향 점수 매핑
    score_map = {
        'q1': {'몰입감 높은 스토리와 세계관': '스토리', '빠른 액션과 타격감': '액션성', '고민이 필요한 전략과 퍼즐': '전략성', '다른 사람들과의 상호작용': '사교성'},
        'q2': {'강력한 보스를 쓰러뜨렸을 때': '액션성', '나만의 공간이나 캐릭터를 꾸밀 때': '창의성', '복잡한 문제를 해결했을 때': '전략성', '팀원과 협력하여 승리했을 때': '사교성'},
        'q3': {'빠르고 숨 쉴 틈 없는 전개': '액션성', '내 페이스대로 즐기는 여유로운 플레이': '창의성', '신중한 계획이 요구되는 턴(Turn) 방식': '전략성', '예측 불가능하고 매번 다른 경험': '모험성'},
        'q4': {'성장의 밑거름! 더 강해져서 돌아온다': '액션성', '괜찮아, 다른 걸 하면 돼': '창의성', '패배 원인을 분석하고 다음 수를 생각한다': '전략성', '아쉽지만, 팀원들과 다음을 기약한다': '사교성'},
        'q5': {'매력적인 캐릭터와 감동적인 서사': '스토리', '정교한 컨트롤과 즉각적인 피드백': '액션성', '자원 관리와 효율적인 성장': '전략성', '다른 플레이어와의 경쟁 또는 협력': '사교성'},
        'q6': {'강력한 적들과의 전투': '액션성', '창의력을 발휘하는 건설과 제작': '창의성', '두뇌를 자극하는 퍼즐과 수수께끼': '전략성', '예측불허의 상황과 생존 경쟁': '모험성'},
        'q7': {'주인공이 되어 스토리를 직접 이끌어간다': '스토리', '한 편의 영화나 소설처럼 감상한다': '스토리', '스토리보다는 게임의 규칙과 시스템이 더 재밌다': '전략성', '다른 플레이어들과 함께 만들어가는 이야기': '사교성'},
        'q8': {'현실적인 그래픽과 분위기': '모험성', '개성 있는 아트 스타일과 판타지 세계': '스토리', '정보가 명확하게 보이는 깔끔한 인터페이스': '전략성', '다양한 코스튬과 꾸미기 요소': '창의성'},
        'q9': {'키보드와 마우스 (PC)': '전략성', '게임 패드 (콘솔/PC)': '액션성', '터치스크린 (모바일)': '창의성', '상관없음': '모험성'},
        'q10': {'수백 시간 이상 깊게 파고드는 편': '전략성', '엔딩을 보고 다른 게임을 찾아보는 편': '스토리', '짧은 시간 동안 가볍게 즐기는 편': '액션성', '커뮤니티 활동까지 하며 계속 즐기는 편': '사교성'},
        'q11': {'미지의 세계를 탐험하고 비밀을 밝히는 것': '모험성', '최고의 장비를 맞추고 캐릭터를 성장시키는 것': '액션성', '나만의 제국이나 도시를 건설하고 운영하는 것': '전략성', '랭킹을 올리거나 길드 활동을 하는 것': '사교성'},
        'q12': {'적극적으로 정보를 찾고 공유한다': '전략성', '막힐 때만 가끔 찾아본다': '스토리', '거의 보지 않고 혼자 해결한다': '모험성', '다른 사람과 소통하기 위해 항상 이용한다': '사교성'}
    }
    
    for q_id, answer in answers.items():
        trait = score_map[q_id][answer]
        traits[trait] += 1
    
    # 3. 최고 성향과 핵심 장르 결정
    # 성향 -> 핵심 장르 매핑
    trait_to_genre = {
        '스토리': 'RPG',
        '액션성': 'Action',
        '전략성': 'Strategy',
        '사교성': 'Multiplayer',
        '창의성': 'Simulation',
        '모험성': 'Adventure'
    }
    
    if not traits:
         st.warning("분석 결과가 없습니다. 질문에 답변해주세요.")
    else:
        top_trait = max(traits, key=traits.get)
        recommended_genre = trait_to_genre[top_trait]

        # 4. 결과 출력
        st.subheader(f'"{top_trait}" 성향의 당신을 위한 추천')
        st.success(f"### 당신의 핵심 게임 장르는 **{recommended_genre}** 입니다!")

        # 5. 일관성 있는 게임 추천
        # 추천 장르가 게임 장르 목록의 맨 앞에 위치할수록 가중치를 부여
        def get_relevance_score(game_genres_str):
            game_genres = game_genres_str.split(';')
            if recommended_genre in game_genres:
                try:
                    # 핵심 장르가 앞에 있을수록 높은 점수 (역순 인덱스)
                    return len(game_genres) - game_genres.index(recommended_genre)
                except ValueError:
                    return 0
            return 0
        
        games_df['relevance'] = games_df['genres'].apply(get_relevance_score)
        
        # 관련도 점수가 높은 순으로 정렬하고 상위 5개 추천
        recommended_games = games_df[games_df['relevance'] > 0].sort_values(by='relevance', ascending=False).head(5)

        st.subheader("🎯 추천 게임 목록")
        if recommended_games.empty:
            st.info('아쉽지만 현재 데이터에 추천할 만한 게임이 없네요.')
        else:
            for _, row in recommended_games.iterrows():
                st.markdown(f"**{row['title']}** (장르: {row['genres'].replace(';', ', ')})")
